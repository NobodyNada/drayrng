
    let sin_table = [
        0x00, 0x06, 0x0C, 0x12, 0x19, 0x1F, 0x25, 0x2B, 0x31, 0x38, 0x3E, 0x44, 0x4A, 0x50, 0x56,
        0x5C, 0x61, 0x67, 0x6D, 0x73, 0x78, 0x7E, 0x83, 0x88, 0x8E, 0x93, 0x98, 0x9D, 0xA2, 0xA7,
        0xAB, 0xB0, 0xB5, 0xB9, 0xBD, 0xC1, 0xC5, 0xC9, 0xCD, 0xD1, 0xD4, 0xD8, 0xDB, 0xDE, 0xE1,
        0xE4, 0xE7, 0xEA, 0xEC, 0xEE, 0xF1, 0xF3, 0xF4, 0xF6, 0xF8, 0xF9, 0xFB, 0xFC, 0xFD, 0xFE,
        0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFD, 0xFC, 0xFB, 0xF9, 0xF8,
        0xF6, 0xF4, 0xF3, 0xF1, 0xEE, 0xEC, 0xEA, 0xE7, 0xE4, 0xE1, 0xDE, 0xDB, 0xD8, 0xD4, 0xD1,
        0xCD, 0xC9, 0xC5, 0xC1, 0xBD, 0xB9, 0xB5, 0xB0, 0xAB, 0xA7, 0xA2, 0x9D, 0x98, 0x93, 0x8E,
        0x88, 0x83, 0x7E, 0x78, 0x73, 0x6D, 0x67, 0x61, 0x5C, 0x56, 0x50, 0x4A, 0x44, 0x3E, 0x38,
        0x31, 0x2B, 0x25, 0x1F, 0x19, 0x12, 0x0C, 0x06,
    ];

    for (theta, sin) in sin_table.into_iter().enumerate() {
        let expected = ((theta as f32 / 0x80 as f32 * PI).sin() * 256.).floor() as u8;
        assert_eq!(sin, expected, "table entry {theta} differs from expected");
    }

    let sin16_table = [
        0x0000, 0x0324, 0x0647, 0x096A, 0x0C8B, 0x0FAB, 0x12C7, 0x15E1, 0x18F8, 0x1C0B, 0x1F19,
        0x2223, 0x2527, 0x2826, 0x2B1F, 0x2E10, 0x30FB, 0x33DE, 0x36B9, 0x398C, 0x3C56, 0x3F17,
        0x41CD, 0x447A, 0x471C, 0x49B3, 0x4C3F, 0x4EBF, 0x5133, 0x539A, 0x55F5, 0x5842, 0x5A82,
        0x5CB3, 0x5ED7, 0x60EB, 0x62F1, 0x64E8, 0x66CF, 0x68A6, 0x6A6D, 0x6C23, 0x6DC9, 0x6F5E,
        0x70E2, 0x7254, 0x73B5, 0x7504, 0x7641, 0x776B, 0x7884, 0x7989, 0x7A7C, 0x7B5C, 0x7C29,
        0x7CE3, 0x7D89, 0x7E1D, 0x7E9C, 0x7F09, 0x7F61, 0x7FA6, 0x7FD8, 0x7FF5, 0x7FFF, 0x7FF5,
        0x7FD8, 0x7FA6, 0x7F61, 0x7F09, 0x7E9C, 0x7E1D, 0x7D89, 0x7CE3, 0x7C29, 0x7B5C, 0x7A7C,
        0x7989, 0x7884, 0x776B, 0x7641, 0x7504, 0x73B5, 0x7254, 0x70E2, 0x6F5E, 0x6DC9, 0x6C23,
        0x6A6D, 0x68A6, 0x66CF, 0x64E8, 0x62F1, 0x60EB, 0x5ED7, 0x5CB3, 0x5A82, 0x5842, 0x55F5,
        0x539A, 0x5133, 0x4EBF, 0x4C3F, 0x49B3, 0x471C, 0x447A, 0x41CD, 0x3F17, 0x3C56, 0x398C,
        0x36B9, 0x33DE, 0x30FB, 0x2E10, 0x2B1F, 0x2826, 0x2527, 0x2223, 0x1F19, 0x1C0B, 0x18F8,
        0x15E1, 0x12C7, 0x0FAB, 0x0C8B, 0x096A, 0x0647, 0x0324,
    ];

    for (theta, sin) in sin16_table.into_iter().enumerate() {
        let exact = (theta as f32 / 0x80 as f32 * PI).sin() * 32767.5;
        let expected = exact as u16;
        println!("{}", exact);
        assert_eq!(sin, expected, "table entry {theta} differs from expected");
    }

    println!(
        "{:.20}",
        (((0x40 as f32) / (0x80 as f32) * PI).sin() * 256.) as u16
    );
